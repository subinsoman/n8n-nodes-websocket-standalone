name: Version, Build & Publish to NPM

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test --if-present
        
      - name: Run linting
        run: npm run lint --if-present

  version-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build package
        run: npm run build --if-present
        
      - name: Check if version needs update
        id: version-check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view n8n-nodes-websocket-standalone version 2>/dev/null || echo "0.0.0")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "published=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "needs_publish=true" >> $GITHUB_OUTPUT
          else
            echo "needs_publish=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Bump patch version
        if: steps.version-check.outputs.needs_publish == 'false'
        run: |
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
      - name: Set existing version
        if: steps.version-check.outputs.needs_publish == 'true'
        run: |
          echo "NEW_VERSION=${{ steps.version-check.outputs.current }}" >> $GITHUB_ENV
          
      - name: Update package files
        run: |
          npm run build --if-present
          
      - name: Commit version bump
        if: steps.version-check.outputs.needs_publish == 'false'
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]" || exit 0
          git push
          
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB }}
          
      - name: Create Git tag
        run: |
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

  release-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build package
        run: npm run build --if-present
        
      - name: Update version to match release
        run: |
          RELEASE_VERSION=${GITHUB_REF#refs/tags/v}
          npm version $RELEASE_VERSION --no-git-tag-version --allow-same-version
          
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB }}
